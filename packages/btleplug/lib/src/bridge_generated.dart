// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class Btleplug {
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  /// Scan for Bluetooth Low Energy devices and send the results through the given sink.
  /// In Dart/Flutter one can listen() to bleScan(). The scan is automatically stopped when the subscription is cancelled.
  ///
  /// # Parameters
  ///
  /// * `sink` - A stream sink that new discovered devices will be passed through.
  /// * `filter` - A list of filter strings to apply to the scan result.
  ///
  /// # Return
  ///
  /// Returns a `Result<()>` indicating if the scan operation has successfully started.
  ///
  /// # Dart/Flutter Example
  /// ```dart
  /// final scan = bleScan().await;
  /// scan.listen((devices) {
  /// ...
  /// })
  /// ```
  Stream<List<BleDevice>> scan({required List<String> filter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScanConstMeta;

  Stream<BleEvent> events({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEventsConstMeta;

  Future<void> connect({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta;

  Future<void> disconnect({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta;

  Stream<List<BleService>> discoverServices({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscoverServicesConstMeta;

  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;

  Future<String> uuidMethodBleCharacteristic({required BleCharacteristic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUuidMethodBleCharacteristicConstMeta;

  Future<String> serviceUuidMethodBleCharacteristic({required BleCharacteristic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kServiceUuidMethodBleCharacteristicConstMeta;

  Future<CharacteristicProperties> propertiesMethodBleCharacteristic({required BleCharacteristic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPropertiesMethodBleCharacteristicConstMeta;

  Future<List<BleDescriptor>> descriptorsMethodBleCharacteristic({required BleCharacteristic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorsMethodBleCharacteristicConstMeta;

  DropFnType get dropOpaqueCharacteristic;
  ShareFnType get shareOpaqueCharacteristic;
  OpaqueTypeFinalizer get CharacteristicFinalizer;
}

@sealed
class Characteristic extends FrbOpaque {
  final Btleplug bridge;
  Characteristic.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueCharacteristic;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueCharacteristic;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.CharacteristicFinalizer;
}

/// A Bluetooth characteristic. Characteristics are the main way you will interact with other
/// bluetooth devices. Characteristics are identified by a UUID which may be standardized
/// (like 0x2803, which identifies a characteristic for reading heart rate measurements) but more
/// often are specific to a particular device. The standard set of characteristics can be found
/// [here](https://www.bluetooth.com/specifications/gatt/characteristics).
///
/// A characteristic may be interacted with in various ways depending on its properties. You may be
/// able to write to it, read from it, set its notify or indicate status, or send a command to it.
class BleCharacteristic {
  final Btleplug bridge;
  final Characteristic characteristic;

  const BleCharacteristic({
    required this.bridge,
    required this.characteristic,
  });

  Future<String> uuid({dynamic hint}) => bridge.uuidMethodBleCharacteristic(
        that: this,
      );

  Future<String> serviceUuid({dynamic hint}) => bridge.serviceUuidMethodBleCharacteristic(
        that: this,
      );

  Future<CharacteristicProperties> properties({dynamic hint}) => bridge.propertiesMethodBleCharacteristic(
        that: this,
      );

  Future<List<BleDescriptor>> descriptors({dynamic hint}) => bridge.descriptorsMethodBleCharacteristic(
        that: this,
      );
}

class BleDescriptor {
  final String uuid;
  final String serviceUuid;
  final String characteristicUuid;

  const BleDescriptor({
    required this.uuid,
    required this.serviceUuid,
    required this.characteristicUuid,
  });
}

/// This is the BleDevice intended to show in Dart/Flutter
class BleDevice {
  final String id;
  final String name;

  const BleDevice({
    required this.id,
    required this.name,
  });
}

@freezed
class BleEvent with _$BleEvent {
  const factory BleEvent.deviceDiscovered({
    required String id,
  }) = BleEvent_DeviceDiscovered;
  const factory BleEvent.deviceUpdated({
    required String id,
  }) = BleEvent_DeviceUpdated;
  const factory BleEvent.deviceConnected({
    required String id,
  }) = BleEvent_DeviceConnected;
  const factory BleEvent.deviceDisconnected({
    required String id,
  }) = BleEvent_DeviceDisconnected;
  const factory BleEvent.manufacturerDataAdvertisement({
    required String id,
    required List<MapData> manufacturerData,
  }) = BleEvent_ManufacturerDataAdvertisement;
  const factory BleEvent.serviceDataAdvertisement({
    required String id,
    required List<MapData> serviceData,
  }) = BleEvent_ServiceDataAdvertisement;
  const factory BleEvent.servicesAdvertisement({
    required String id,
    required List<String> services,
  }) = BleEvent_ServicesAdvertisement;
}

/// A GATT service. Services are groups of characteristics, which may be standard or
/// device-specific.
class BleService {
  final String uuid;
  final bool primary;
  final List<BleCharacteristic> characteristics;

  const BleService({
    required this.uuid,
    required this.primary,
    required this.characteristics,
  });
}

/// A set of properties that indicate what operations are supported by a Characteristic.
class CharacteristicProperties {
  final bool broadcast;
  final bool read;
  final bool writeWithoutResponse;
  final bool write;
  final bool notify;
  final bool indicate;
  final bool authenticatedSignedWrites;
  final bool extendedProperties;

  const CharacteristicProperties({
    required this.broadcast,
    required this.read,
    required this.writeWithoutResponse,
    required this.write,
    required this.notify,
    required this.indicate,
    required this.authenticatedSignedWrites,
    required this.extendedProperties,
  });
}

class LogEntry {
  final int timeMillis;
  final String msg;

  const LogEntry({
    required this.timeMillis,
    required this.msg,
  });
}

class MapData {
  final String key;
  final Uint8List data;

  const MapData({
    required this.key,
    required this.data,
  });
}

class BtleplugImpl implements Btleplug {
  final BtleplugPlatform _platform;
  factory BtleplugImpl(ExternalLibrary dylib) => BtleplugImpl.raw(BtleplugPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BtleplugImpl.wasm(FutureOr<WasmModule> module) => BtleplugImpl(module as ExternalLibrary);
  BtleplugImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  Stream<List<BleDevice>> scan({required List<String> filter, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(filter);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scan(port_, arg0),
      parseSuccessData: _wire2api_list_ble_device,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kScanConstMeta,
      argValues: [
        filter
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "scan",
        argNames: [
          "filter"
        ],
      );

  Stream<BleEvent> events({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_events(port_),
      parseSuccessData: _wire2api_ble_event,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kEventsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEventsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "events",
        argNames: [],
      );

  Future<void> connect({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConnectConstMeta,
      argValues: [
        id
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect",
        argNames: [
          "id"
        ],
      );

  Future<void> disconnect({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisconnectConstMeta,
      argValues: [
        id
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect",
        argNames: [
          "id"
        ],
      );

  Stream<List<BleService>> discoverServices({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discover_services(port_, arg0),
      parseSuccessData: _wire2api_list_ble_service,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscoverServicesConstMeta,
      argValues: [
        id
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscoverServicesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discover_services",
        argNames: [
          "id"
        ],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: null,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  Future<String> uuidMethodBleCharacteristic({required BleCharacteristic that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ble_characteristic(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_uuid__method__BleCharacteristic(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kUuidMethodBleCharacteristicConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUuidMethodBleCharacteristicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "uuid__method__BleCharacteristic",
        argNames: [
          "that"
        ],
      );

  Future<String> serviceUuidMethodBleCharacteristic({required BleCharacteristic that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ble_characteristic(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_service_uuid__method__BleCharacteristic(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kServiceUuidMethodBleCharacteristicConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kServiceUuidMethodBleCharacteristicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "service_uuid__method__BleCharacteristic",
        argNames: [
          "that"
        ],
      );

  Future<CharacteristicProperties> propertiesMethodBleCharacteristic({required BleCharacteristic that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ble_characteristic(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_properties__method__BleCharacteristic(port_, arg0),
      parseSuccessData: _wire2api_characteristic_properties,
      parseErrorData: null,
      constMeta: kPropertiesMethodBleCharacteristicConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPropertiesMethodBleCharacteristicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "properties__method__BleCharacteristic",
        argNames: [
          "that"
        ],
      );

  Future<List<BleDescriptor>> descriptorsMethodBleCharacteristic({required BleCharacteristic that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ble_characteristic(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_descriptors__method__BleCharacteristic(port_, arg0),
      parseSuccessData: _wire2api_list_ble_descriptor,
      parseErrorData: null,
      constMeta: kDescriptorsMethodBleCharacteristicConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDescriptorsMethodBleCharacteristicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptors__method__BleCharacteristic",
        argNames: [
          "that"
        ],
      );

  DropFnType get dropOpaqueCharacteristic => _platform.inner.drop_opaque_Characteristic;
  ShareFnType get shareOpaqueCharacteristic => _platform.inner.share_opaque_Characteristic;
  OpaqueTypeFinalizer get CharacteristicFinalizer => _platform.CharacteristicFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Characteristic _wire2api_Characteristic(dynamic raw) {
    return Characteristic.fromRaw(raw[0], raw[1], this);
  }

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  BleCharacteristic _wire2api_ble_characteristic(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BleCharacteristic(
      bridge: this,
      characteristic: _wire2api_Characteristic(arr[0]),
    );
  }

  BleDescriptor _wire2api_ble_descriptor(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BleDescriptor(
      uuid: _wire2api_String(arr[0]),
      serviceUuid: _wire2api_String(arr[1]),
      characteristicUuid: _wire2api_String(arr[2]),
    );
  }

  BleDevice _wire2api_ble_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BleDevice(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  BleEvent _wire2api_ble_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return BleEvent_DeviceDiscovered(
          id: _wire2api_String(raw[1]),
        );
      case 1:
        return BleEvent_DeviceUpdated(
          id: _wire2api_String(raw[1]),
        );
      case 2:
        return BleEvent_DeviceConnected(
          id: _wire2api_String(raw[1]),
        );
      case 3:
        return BleEvent_DeviceDisconnected(
          id: _wire2api_String(raw[1]),
        );
      case 4:
        return BleEvent_ManufacturerDataAdvertisement(
          id: _wire2api_String(raw[1]),
          manufacturerData: _wire2api_list_map_data(raw[2]),
        );
      case 5:
        return BleEvent_ServiceDataAdvertisement(
          id: _wire2api_String(raw[1]),
          serviceData: _wire2api_list_map_data(raw[2]),
        );
      case 6:
        return BleEvent_ServicesAdvertisement(
          id: _wire2api_String(raw[1]),
          services: _wire2api_StringList(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  BleService _wire2api_ble_service(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BleService(
      uuid: _wire2api_String(arr[0]),
      primary: _wire2api_bool(arr[1]),
      characteristics: _wire2api_list_ble_characteristic(arr[2]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  CharacteristicProperties _wire2api_characteristic_properties(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return CharacteristicProperties(
      broadcast: _wire2api_bool(arr[0]),
      read: _wire2api_bool(arr[1]),
      writeWithoutResponse: _wire2api_bool(arr[2]),
      write: _wire2api_bool(arr[3]),
      notify: _wire2api_bool(arr[4]),
      indicate: _wire2api_bool(arr[5]),
      authenticatedSignedWrites: _wire2api_bool(arr[6]),
      extendedProperties: _wire2api_bool(arr[7]),
    );
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<BleCharacteristic> _wire2api_list_ble_characteristic(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ble_characteristic).toList();
  }

  List<BleDescriptor> _wire2api_list_ble_descriptor(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ble_descriptor).toList();
  }

  List<BleDevice> _wire2api_list_ble_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ble_device).toList();
  }

  List<BleService> _wire2api_list_ble_service(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ble_service).toList();
  }

  List<MapData> _wire2api_list_map_data(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_map_data).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      msg: _wire2api_String(arr[1]),
    );
  }

  MapData _wire2api_map_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MapData(
      key: _wire2api_String(arr[0]),
      data: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
