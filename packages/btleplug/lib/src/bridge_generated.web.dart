// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class BtleplugPlatform extends FlutterRustBridgeBase<BtleplugWire> with FlutterRustBridgeSetupMixin {
  BtleplugPlatform(FutureOr<WasmModule> dylib) : super(BtleplugWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_Characteristic(Characteristic raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_ble_characteristic(BleCharacteristic raw) {
    return [
      api2wire_Characteristic(raw.characteristic)
    ];
  }

  @protected
  List<dynamic> api2wire_box_autoadd_ble_characteristic(BleCharacteristic raw) {
    return api2wire_ble_characteristic(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _CharacteristicFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_Characteristic);
  Finalizer<PlatformPointer> get CharacteristicFinalizer => _CharacteristicFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external BtleplugWasmModule get wasmModule;

@JS()
@anonymous
class BtleplugWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external BtleplugWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_init(NativePortType port_);

  external dynamic /* void */ wire_scan(NativePortType port_, List<String> filter);

  external dynamic /* void */ wire_events(NativePortType port_);

  external dynamic /* void */ wire_connect(NativePortType port_, String id);

  external dynamic /* void */ wire_disconnect(NativePortType port_, String id);

  external dynamic /* void */ wire_discover_services(NativePortType port_, String id);

  external dynamic /* void */ wire_create_log_stream(NativePortType port_);

  external dynamic /* void */ wire_uuid__method__BleCharacteristic(NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_service_uuid__method__BleCharacteristic(NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_properties__method__BleCharacteristic(NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_descriptors__method__BleCharacteristic(NativePortType port_, List<dynamic> that);

  external dynamic /*  */ drop_opaque_Characteristic(ptr);

  external int /* *const c_void */ share_opaque_Characteristic(ptr);
}

// Section: WASM wire connector

class BtleplugWire extends FlutterRustBridgeWasmWireBase<BtleplugWasmModule> {
  BtleplugWire(FutureOr<WasmModule> module) : super(WasmModule.cast<BtleplugWasmModule>(module));

  void wire_init(NativePortType port_) => wasmModule.wire_init(port_);

  void wire_scan(NativePortType port_, List<String> filter) => wasmModule.wire_scan(port_, filter);

  void wire_events(NativePortType port_) => wasmModule.wire_events(port_);

  void wire_connect(NativePortType port_, String id) => wasmModule.wire_connect(port_, id);

  void wire_disconnect(NativePortType port_, String id) => wasmModule.wire_disconnect(port_, id);

  void wire_discover_services(NativePortType port_, String id) => wasmModule.wire_discover_services(port_, id);

  void wire_create_log_stream(NativePortType port_) => wasmModule.wire_create_log_stream(port_);

  void wire_uuid__method__BleCharacteristic(NativePortType port_, List<dynamic> that) => wasmModule.wire_uuid__method__BleCharacteristic(port_, that);

  void wire_service_uuid__method__BleCharacteristic(NativePortType port_, List<dynamic> that) => wasmModule.wire_service_uuid__method__BleCharacteristic(port_, that);

  void wire_properties__method__BleCharacteristic(NativePortType port_, List<dynamic> that) => wasmModule.wire_properties__method__BleCharacteristic(port_, that);

  void wire_descriptors__method__BleCharacteristic(NativePortType port_, List<dynamic> that) => wasmModule.wire_descriptors__method__BleCharacteristic(port_, that);

  dynamic /*  */ drop_opaque_Characteristic(ptr) => wasmModule.drop_opaque_Characteristic(ptr);

  int /* *const c_void */ share_opaque_Characteristic(ptr) => wasmModule.share_opaque_Characteristic(ptr);
}
