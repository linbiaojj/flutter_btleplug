// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class BtleplugPlatform extends FlutterRustBridgeBase<BtleplugWire> {
  BtleplugPlatform(ffi.DynamicLibrary dylib) : super(BtleplugWire(dylib));

// Section: api2wire

  @protected
  wire_Characteristic api2wire_Characteristic(Characteristic raw) {
    final ptr = inner.new_Characteristic();
    _api_fill_to_wire_Characteristic(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_BleCharacteristic> api2wire_box_autoadd_ble_characteristic(BleCharacteristic raw) {
    final ptr = inner.new_box_autoadd_ble_characteristic_0();
    _api_fill_to_wire_ble_characteristic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _CharacteristicFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_CharacteristicPtr);
  OpaqueTypeFinalizer get CharacteristicFinalizer => _CharacteristicFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_Characteristic(Characteristic apiObj, wire_Characteristic wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_ble_characteristic(BleCharacteristic apiObj, wire_BleCharacteristic wireObj) {
    wireObj.characteristic = api2wire_Characteristic(apiObj.characteristic);
  }

  void _api_fill_to_wire_box_autoadd_ble_characteristic(BleCharacteristic apiObj, ffi.Pointer<wire_BleCharacteristic> wireObj) {
    _api_fill_to_wire_ble_characteristic(apiObj, wireObj.ref);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BtleplugWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BtleplugWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BtleplugWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  int JNI_OnLoad(
    int vm,
    ffi.Pointer<ffi.Void> res,
  ) {
    return _JNI_OnLoad(
      vm,
      res,
    );
  }

  late final _JNI_OnLoadPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>('JNI_OnLoad');
  late final _JNI_OnLoad = _JNI_OnLoadPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
  ) {
    return _wire_init(
      port_,
    );
  }

  late final _wire_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<void Function(int)>();

  void wire_scan(
    int port_,
    ffi.Pointer<wire_StringList> filter,
  ) {
    return _wire_scan(
      port_,
      filter,
    );
  }

  late final _wire_scanPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_scan');
  late final _wire_scan = _wire_scanPtr.asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_events(
    int port_,
  ) {
    return _wire_events(
      port_,
    );
  }

  late final _wire_eventsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_events');
  late final _wire_events = _wire_eventsPtr.asFunction<void Function(int)>();

  void wire_connect(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_connect(
      port_,
      id,
    );
  }

  late final _wire_connectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_connect');
  late final _wire_connect = _wire_connectPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_disconnect(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_disconnect(
      port_,
      id,
    );
  }

  late final _wire_disconnectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_disconnect');
  late final _wire_disconnect = _wire_disconnectPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_discover_services(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_discover_services(
      port_,
      id,
    );
  }

  late final _wire_discover_servicesPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_discover_services');
  late final _wire_discover_services = _wire_discover_servicesPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_log_stream');
  late final _wire_create_log_stream = _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_uuid__method__BleCharacteristic(
    int port_,
    ffi.Pointer<wire_BleCharacteristic> that,
  ) {
    return _wire_uuid__method__BleCharacteristic(
      port_,
      that,
    );
  }

  late final _wire_uuid__method__BleCharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BleCharacteristic>)>>('wire_uuid__method__BleCharacteristic');
  late final _wire_uuid__method__BleCharacteristic = _wire_uuid__method__BleCharacteristicPtr.asFunction<void Function(int, ffi.Pointer<wire_BleCharacteristic>)>();

  void wire_service_uuid__method__BleCharacteristic(
    int port_,
    ffi.Pointer<wire_BleCharacteristic> that,
  ) {
    return _wire_service_uuid__method__BleCharacteristic(
      port_,
      that,
    );
  }

  late final _wire_service_uuid__method__BleCharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BleCharacteristic>)>>('wire_service_uuid__method__BleCharacteristic');
  late final _wire_service_uuid__method__BleCharacteristic = _wire_service_uuid__method__BleCharacteristicPtr.asFunction<void Function(int, ffi.Pointer<wire_BleCharacteristic>)>();

  void wire_properties__method__BleCharacteristic(
    int port_,
    ffi.Pointer<wire_BleCharacteristic> that,
  ) {
    return _wire_properties__method__BleCharacteristic(
      port_,
      that,
    );
  }

  late final _wire_properties__method__BleCharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BleCharacteristic>)>>('wire_properties__method__BleCharacteristic');
  late final _wire_properties__method__BleCharacteristic = _wire_properties__method__BleCharacteristicPtr.asFunction<void Function(int, ffi.Pointer<wire_BleCharacteristic>)>();

  void wire_descriptors__method__BleCharacteristic(
    int port_,
    ffi.Pointer<wire_BleCharacteristic> that,
  ) {
    return _wire_descriptors__method__BleCharacteristic(
      port_,
      that,
    );
  }

  late final _wire_descriptors__method__BleCharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BleCharacteristic>)>>('wire_descriptors__method__BleCharacteristic');
  late final _wire_descriptors__method__BleCharacteristic = _wire_descriptors__method__BleCharacteristicPtr.asFunction<void Function(int, ffi.Pointer<wire_BleCharacteristic>)>();

  wire_Characteristic new_Characteristic() {
    return _new_Characteristic();
  }

  late final _new_CharacteristicPtr = _lookup<ffi.NativeFunction<wire_Characteristic Function()>>('new_Characteristic');
  late final _new_Characteristic = _new_CharacteristicPtr.asFunction<wire_Characteristic Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>('new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr.asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_BleCharacteristic> new_box_autoadd_ble_characteristic_0() {
    return _new_box_autoadd_ble_characteristic_0();
  }

  late final _new_box_autoadd_ble_characteristic_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_BleCharacteristic> Function()>>('new_box_autoadd_ble_characteristic_0');
  late final _new_box_autoadd_ble_characteristic_0 = _new_box_autoadd_ble_characteristic_0Ptr.asFunction<ffi.Pointer<wire_BleCharacteristic> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_Characteristic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Characteristic(
      ptr,
    );
  }

  late final _drop_opaque_CharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_Characteristic');
  late final _drop_opaque_Characteristic = _drop_opaque_CharacteristicPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Characteristic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Characteristic(
      ptr,
    );
  }

  late final _share_opaque_CharacteristicPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_Characteristic');
  late final _share_opaque_Characteristic = _share_opaque_CharacteristicPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Characteristic extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_BleCharacteristic extends ffi.Struct {
  external wire_Characteristic characteristic;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
